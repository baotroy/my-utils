import axios from "axios";
import fs from "fs";
import { Interface } from "ethers";
import { IFunctionFragement } from "./type";
// const inputData = "0x82ad56cb00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000001b60aad7ba6f8b752c918c8373bd0a44aa9c8320000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003046a761202000000000000000000000000b5fbfeba9848664fd1a49dc2a250d9b5d1294f2abf3890000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000dc6ff44d5d932cbd77b52e5612ba0529dc6226f1000000000000000000000000000000000000000000000000000000000000271000000000000000000000000001b60aad7ba6f8b752c918c8373bd0a44aa9c83200000000000000000000000000000000000000000000000000000000670be7a8000000000000000000000000000000000000000000000000000000000095e6f8000000000000000000000000000000000000000000000000437e7325ec89f7780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041681a30ea70b9ba5ccdb3bdc80c9869fddb012cfa28615af3af0855ce8a71bafe6d316e46b9ec978a0b5d6b49036e5ec38b7b86d3513dcae27fae87c0f76248c41b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
// const inputData = "0x6a761202000000000000000000000000ca11bde05977b3631167028862be2a173976caa0000000000000000000000000000000000000000000000000000000000000022482ad56cb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000120000000000000000000000000dc6ff44d5d932cbd77b52e5612ba0529dc6226f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044095ea7b300000000000000000000000021c4928109acb0659a88ae5329b5374a3024694c000000000000000000000000000000000000000000000000487d8e184ab141e00000000000000000000000000000000000000000000000000000000000000000000000000000000021c4928109acb0659a88ae5329b5374a3024694c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000024b6b55f25000000000000000000000000000000000000000000000000487d8e184ab141e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412cb34161754531e280e92c0316134e76d82a3a822a173b61ff27a208473736662e19f9e7ff6abbb8b70ed3749ea10173ee16189a1a2172dd3e8cfce743517abe1c00000000000000000000000000000000000000000000000000000000000000"
// const inputData = "0x82ad56cb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000120000000000000000000000000dc6ff44d5d932cbd77b52e5612ba0529dc6226f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044095ea7b300000000000000000000000021c4928109acb0659a88ae5329b5374a3024694c000000000000000000000000000000000000000000000000487d8e184ab141e00000000000000000000000000000000000000000000000000000000000000000000000000000000021c4928109acb0659a88ae5329b5374a3024694c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000024b6b55f25000000000000000000000000000000000000000000000000487d8e184ab141e000000000000000000000000000000000000000000000000000000000"
const inputData = "0x6a761202000000000000000000000000ca11bde05977b3631167028862be2a173976caa0000000000000000000000000000000000000000000000000000000000000022482ad56cb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000120000000000000000000000000dc6ff44d5d932cbd77b52e5612ba0529dc6226f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044095ea7b300000000000000000000000021c4928109acb0659a88ae5329b5374a3024694c000000000000000000000000000000000000000000000000487d8e184ab141e00000000000000000000000000000000000000000000000000000000000000000000000000000000021c4928109acb0659a88ae5329b5374a3024694c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000024b6b55f25000000000000000000000000000000000000000000000000487d8e184ab141e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412cb34161754531e280e92c0316134e76d82a3a822a173b61ff27a208473736662e19f9e7ff6abbb8b70ed3749ea10173ee16189a1a2172dd3e8cfce743517abe1c00000000000000000000000000000000000000000000000000000000000000"
const signatureDataApi = "https://api.openchain.xyz/signature-database/v1/lookup?function="
export const decodeFunctionDataNoABI = async (inputData: string) => {
  const funcName = getFunctionName(inputData);
  try {
    console.log("ðŸš€ funcName:", funcName)
    const response = await axios.get(signatureDataApi + funcName)

    const funcRes = response.data.result.function[funcName] ? response.data.result.function[funcName][0].name : null

    if (!funcRes) return null

    const functionName = funcRes.split("(")[0];

    const iface = new Interface([`function ${funcRes}`]);
    // const params = iface.parseTransaction({ data: inputData });
    // console.log("ðŸš€  params:", params)

    const decodeData = iface.decodeFunctionData(functionName, inputData);
    // console.log("ðŸš€ decodeData:", decodeData)

    const funcFrag = iface.getFunction(funcRes);
    // console.log("ðŸš€ funcFrag:", funcFrag)

    if (funcFrag) {
      const newFuncFrag: IFunctionFragement = {
        type: "function",
        name: funcFrag.name,
        inputs: [],
        // inputs: funcFrag.inputs.map((input, index: number) => {
        //   return {
        //     type: input.type,
        //     baseType: input.baseType,
        //     name: input.name,
        //     arrayChildren: input.arrayChildren,
        //     value: decodeData[index]
        //   } as IParamInput
        // })
      }

      // Append inputs to newFuncFrag
      for (let i = 0; i < funcFrag.inputs.length; i++) {
        const paramType = funcFrag.inputs[i];
        const newInput = await getParamType(paramType, decodeData[i])
        // if (input.baseType === "tuple" && input.components) {
        //   // console.log("array children", input.arrayChildren)
        //   newInput.arrayChildren = input.components.map((child, index) => {
        //     return {
        //       type: child.type,
        //       baseType: child.baseType,
        //       name: child.name,
        //       value: decodeData[i][index]
        //     } as IParamInput
        //   })
        // }




        newFuncFrag.inputs.push(newInput)
      }

      return newFuncFrag
    }

    return null


  } catch (e) {
    console.error(e)
    return null
  }
}

async function getFunction(funcFrag: any, value: any) {
  return {
    type: "function",
    name: funcFrag.name,
    inputs: await Promise.all(
      funcFrag.inputs.map((input: any) => {
        return getParamType(input, value)
      })
    ),
  }
}
// component cá»§a tuple
// arrayChildren cá»§a array
async function getParamType(paramType: any, value: any) {

  const newParamType: any = {
    name: "",
    type: paramType.type,
    baseType: paramType.baseType,
    value: paramType.arrayChildren ? value.flat().join(",") : value,
  }

  // case array type[], eg: uint256[], string[], address[], tuple[]
  if (paramType.baseType === "array" && paramType.arrayChildren) {
    // console.log("array children", decodeData[i])
    const child = paramType.arrayChildren
    newParamType.arrayChildren = await Promise.all(
      value.map((childValue: any) => {
        return getParamType(child, childValue)
      })
    )
  }
  else {
    if (paramType.baseType === "tuple" && paramType.components) {
      newParamType.components = await Promise.all(
        paramType.components.map((child: any, index: number) => {
          return getParamType(child, value[index])
        })
      )
    } else if (paramType.type === "bytes") {
      // console.log("bytes", value)
      newParamType.function = await decodeFunctionDataNoABI(value)
      // console.log(print(newParamType.function))
    }
    newParamType.value = value
  }
  return newParamType
}

function getFunctionName(inputData: string) {
  return inputData.substring(0, 10);
}

decodeFunctionDataNoABI(inputData).then(r => {
  console.log(r)
  fs.writeFileSync("output.json", print(r))
})

const print = (r: any): string => {
  return JSON.stringify(r, (_, v) => typeof v === "bigint" ? v.toString() : v);
}